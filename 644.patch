From 3bef23405c92f22aa3b85dd996b9a3cba62b90ae Mon Sep 17 00:00:00 2001
From: jwag956 <jwag.wagner@gmail.com>
Date: Wed, 27 Jul 2022 15:46:09 -0700
Subject: [PATCH] Support for latest Werkzeug and Flask and Flask-Login

flask-login changed where they store the current user - we used that (it was internal). It is now on 'g' which is part of the app context so for
a couple unit tests - wasn't getting popped (it used to be on the request context).

Following Flask guidelines - changed our get/set of request attributes (fs_authn_via) over to 'g' as well.
---
 .pre-commit-config.yaml      |  6 ++--
 CHANGES.rst                  |  9 ++++++
 docs/conf.py                 |  2 +-
 flask_security/__init__.py   |  4 +--
 flask_security/core.py       | 15 ++++++----
 flask_security/decorators.py |  9 +++---
 flask_security/utils.py      |  7 +++--
 requirements/docs.txt        |  4 +--
 tests/test_common.py         | 55 +++++++++++++++++-------------------
 tox.ini                      |  3 +-
 10 files changed, 63 insertions(+), 51 deletions(-)


diff --git a/CHANGES.rst b/CHANGES.rst
index ccef9c18..d5615bf3 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -3,6 +3,15 @@ Flask-Security Changelog

 Here you can see the full list of changes between each Flask-Security release.

+Version 4.1.5
+-------------
+
+Released July 28, 2022
+
+Fixes
++++++
+- (:pr:`644`) Fix test and other failures with newer Flask-Login/Werkzeug versions.
+
 Version 4.1.4
 -------------

diff --git a/docs/conf.py b/docs/conf.py
index 13e41869..d358b276 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -57,7 +57,7 @@
 # built documents.
 #
 # The short X.Y version.
-version = "4.1.4"
+version = "4.1.5"
 # The full version, including alpha/beta/rc tags.
 release = version

diff --git a/flask_security/__init__.py b/flask_security/__init__.py
index 29fffbea..a16e1459 100644
--- a/flask_security/__init__.py
+++ b/flask_security/__init__.py
@@ -6,7 +6,7 @@
     security via Flask-Login, Flask-Principal, Flask-WTF, and passlib.

     :copyright: (c) 2012-2019 by Matt Wright.
-    :copyright: (c) 2019-2020 by J. Christopher Wagner.
+    :copyright: (c) 2019-2022 by J. Christopher Wagner.
     :license: MIT, see LICENSE for more details.
 """

@@ -105,4 +105,4 @@
     verify_and_update_password,
 )

-__version__ = "4.1.4"
+__version__ = "4.1.5"
diff --git a/flask_security/core.py b/flask_security/core.py
index 7cd58ead..a7450e64 100644
--- a/flask_security/core.py
+++ b/flask_security/core.py
@@ -17,7 +17,7 @@
 import warnings

 import pkg_resources
-from flask import _request_ctx_stack, current_app
+from flask import _request_ctx_stack, current_app, g
 from flask.json import JSONEncoder
 from flask_login import AnonymousUserMixin, LoginManager
 from flask_login import UserMixin as BaseUserMixin
@@ -79,6 +79,7 @@
     get_identity_attribute,
     get_identity_attributes,
     get_message,
+    get_request_attr,
     localize_callback,
     set_request_attr,
     uia_email_mapper,
@@ -474,8 +475,11 @@ def _request_loader(request):
     # decorator @auth_token_required can call us.
     # N.B. we don't call current_user here since that in fact might try and LOAD
     # a user - which would call us again.
-    if all(hasattr(_request_ctx_stack.top, k) for k in ["fs_authn_via", "user"]):
-        if _request_ctx_stack.top.fs_authn_via == "token":
+    if get_request_attr("fs_authn_via") == "token":
+        # Flask-Login 0.6.2 and post Flask 2.2
+        if hasattr(g, "_login_user"):
+            return g._login_user
+        elif hasattr(_request_ctx_stack.top, "user"):
             return _request_ctx_stack.top.user

     header_key = _security.token_authentication_header
@@ -523,6 +527,7 @@ def _identity_loader():
     if not isinstance(current_user._get_current_object(), AnonymousUserMixin):
         identity = Identity(current_user.fs_uniquifier)
         return identity
+    return None


 def _on_identity_loaded(sender, identity):
@@ -1599,8 +1604,8 @@ def _add_ctx_processor(

     def _run_ctx_processor(self, endpoint: str) -> t.Dict[str, t.Any]:
         rv: t.Dict[str, t.Any] = {}
-        for g in ["global", endpoint]:
-            for fn in self._context_processors.setdefault(g, []):
+        for gl in ["global", endpoint]:
+            for fn in self._context_processors.setdefault(gl, []):
                 rv.update(fn())
         return rv

diff --git a/flask_security/decorators.py b/flask_security/decorators.py
index d460ee08..be3f4a60 100644
--- a/flask_security/decorators.py
+++ b/flask_security/decorators.py
@@ -14,7 +14,7 @@
 from functools import wraps
 import typing as t

-from flask import Response, _request_ctx_stack, abort, current_app, g, redirect, request
+from flask import Response, abort, current_app, g, redirect, request
 from flask_login import current_user, login_required  # noqa: F401
 from flask_principal import Identity, Permission, RoleNeed, identity_changed
 from flask_wtf.csrf import CSRFError
@@ -149,7 +149,6 @@ def _check_token():

     if user and user.is_authenticated:
         app = current_app._get_current_object()
-        _request_ctx_stack.top.user = user
         identity_changed.send(app, identity=Identity(user.fs_uniquifier))
         return True

@@ -166,8 +165,8 @@ def _check_http_auth():

     if user and user.verify_and_update_password(auth.password):
         _security.datastore.commit()
+        _security.login_manager._update_request_context_with_user(user)
         app = current_app._get_current_object()
-        _request_ctx_stack.top.user = user
         identity_changed.send(app, identity=Identity(user.fs_uniquifier))
         return True

@@ -208,7 +207,7 @@ def handle_csrf(method: t.Optional[str]) -> None:
         if method in config_value("CSRF_PROTECT_MECHANISMS"):
             _csrf.protect()  # type: ignore
         else:
-            _request_ctx_stack.top.fs_ignore_csrf = True
+            set_request_attr("fs_ignore_csrf", True)


 def http_auth_required(realm: t.Any) -> DecoratedView:
@@ -439,7 +438,7 @@ def decorated(*args, **kwargs):
                 config_value("CSRF_IGNORE_UNAUTH_ENDPOINTS")
                 and not current_user.is_authenticated
             ):
-                _request_ctx_stack.top.fs_ignore_csrf = True
+                set_request_attr("fs_ignore_csrf", True)
             else:
                 try:
                     _csrf.protect()
diff --git a/flask_security/utils.py b/flask_security/utils.py
index 07d7991e..9e33f442 100644
--- a/flask_security/utils.py
+++ b/flask_security/utils.py
@@ -23,7 +23,6 @@
 import urllib.error

 from flask import (
-    _request_ctx_stack,
     after_this_request,
     current_app,
     flash,
@@ -80,12 +79,14 @@ def get_request_attr(name: str) -> t.Any:
     Returns None if attribute doesn't exist.

     .. versionadded:: 4.0.0
+    .. versionchanged:: 4.1.5
+        Use 'g' rather than request_ctx stack which is going away post Flask 2.2
     """
-    return getattr(_request_ctx_stack.top, name, None)
+    return getattr(g, name, None)


 def set_request_attr(name, value):
-    return setattr(_request_ctx_stack.top, name, value)
+    return setattr(g, name, value)


 """
diff --git a/requirements/docs.txt b/requirements/docs.txt
index 06c7d258..7e12a36a 100644
--- a/requirements/docs.txt
+++ b/requirements/docs.txt
@@ -1,3 +1,3 @@
 Pallets-Sphinx-Themes~=2.0
-Sphinx~=4.0
-sphinx-issues~=1.2
+Sphinx~=5.0
+sphinx-issues==3.0.1
diff --git a/tests/test_common.py b/tests/test_common.py
index acb6414b..0d9d42a9 100644
--- a/tests/test_common.py
+++ b/tests/test_common.py
@@ -812,24 +812,24 @@ class User(db.Model, fsqla.FsUserMixin):
         )
         ds.commit()

-        client_nc = app.test_client(use_cookies=False)
+    client_nc = app.test_client(use_cookies=False)

-        response = json_authenticate(client_nc)
-        token = response.json["response"]["user"]["authentication_token"]
-        verify_token(client_nc, token)
+    response = json_authenticate(client_nc)
+    token = response.json["response"]["user"]["authentication_token"]
+    verify_token(client_nc, token)

-        # now change uniquifier
-        with app.test_request_context("/"):
-            user = app.security.datastore.find_user(email="matt@lp.com")
-            app.security.datastore.reset_user_access(user)
-            app.security.datastore.commit()
+    # now change uniquifier
+    with app.test_request_context("/"):
+        user = app.security.datastore.find_user(email="matt@lp.com")
+        app.security.datastore.reset_user_access(user)
+        app.security.datastore.commit()

-        verify_token(client_nc, token, status=401)
+    verify_token(client_nc, token, status=401)

-        # get new token and verify it works
-        response = json_authenticate(client_nc)
-        token = response.json["response"]["user"]["authentication_token"]
-        verify_token(client_nc, token)
+    # get new token and verify it works
+    response = json_authenticate(client_nc)
+    token = response.json["response"]["user"]["authentication_token"]
+    verify_token(client_nc, token)


 def test_null_token_uniquifier(app):
@@ -876,24 +876,21 @@ class User(db.Model, fsqla.FsUserMixin):
         verify_token(client_nc, token)


-def test_token_query(in_app_context):
+def test_token_query(app, client_nc):
     # Verify that when authenticating with auth token (and not session)
     # that there is just one DB query to get user.
-    app = in_app_context
-    populate_data(app)
-    client_nc = app.test_client(use_cookies=False)
-
-    response = json_authenticate(client_nc)
-    token = response.json["response"]["user"]["authentication_token"]
-    current_nqueries = get_num_queries(app.security.datastore)
+    with app.app_context():
+        response = json_authenticate(client_nc)
+        token = response.json["response"]["user"]["authentication_token"]
+        assert get_num_queries(app.security.datastore) == 1

-    response = client_nc.get(
-        "/token",
-        headers={"Content-Type": "application/json", "Authentication-Token": token},
-    )
-    assert response.status_code == 200
-    end_nqueries = get_num_queries(app.security.datastore)
-    assert current_nqueries is None or end_nqueries == (current_nqueries + 1)
+    with app.app_context():
+        response = client_nc.get(
+            "/token",
+            headers={"Content-Type": "application/json", "Authentication-Token": token},
+        )
+        assert response.status_code == 200
+        assert get_num_queries(app.security.datastore) == 1


 def test_session_query(in_app_context):
diff --git a/tox.ini b/tox.ini
index 5f7b4518..2f0c1aba 100644
--- a/tox.ini
+++ b/tox.ini
@@ -26,6 +26,7 @@ deps =
     Flask-Babel==2.0.0
     Flask-Mail==0.9.1
     Flask-Mongoengine==1.0.0
+    FLask-Login==0.5.0
     peewee==3.11.2
     argon2_cffi==20.1.0
     babel==2.7.0
@@ -43,7 +44,7 @@ deps =
     pyqrcode==1.2
     sqlalchemy==1.3.19
     sqlalchemy-utils==0.36.5
-    werkzeug==0.16.1
+    werkzeug==1.0.1
     zxcvbn==4.4.28
 commands =
     python setup.py compile_catalog
